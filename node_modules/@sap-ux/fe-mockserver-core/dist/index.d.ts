/// <reference path="../types.d.ts" />
import type { MockserverConfiguration } from './api';
export interface IFileLoader {
    loadFile(filePath: string): Promise<string>;
    loadFileSync(filePath: string): string;
    exists(filePath: string): Promise<boolean>;
    existsSync(filePath: string): boolean;
    syncSupported(): boolean;
    loadJS(filePath: string): Promise<any>;
}
export interface IMetadataProcessor {
    loadMetadata(filePath: string): Promise<string>;
    addI18nPath(i18Path?: string[]): void;
}
export * from './api';
export { MockDataContributor } from './mockdata/functionBasedMockData';
export default class FEMockserver {
    private configuration;
    isReady: Promise<void>;
    private fileLoader;
    private metadataProvider;
    private readonly mainRouter;
    constructor(configuration: MockserverConfiguration);
    private initialize;
    getRouter(): import("router").Router.IRouter;
}
//# sourceMappingURL=index.d.ts.map