import type { DataAccessInterface } from './common';
/**
 * Registry for managing cross-service communication in the mockserver.
 * Allows services to access entity interfaces from other services in a controlled manner.
 */
export declare class ServiceRegistry {
    private readonly services;
    private readonly aliases;
    /**
     * Register a service with its DataAccess instance.
     * @param serviceName - The name/path of the service
     * @param dataAccess - The DataAccess instance for this service
     * @param alias - Optional alias for easier reference
     */
    registerService(serviceName: string, dataAccess: DataAccessInterface, alias?: string): void;
    /**
     * Get a DataAccess instance for a specific service.
     * @param serviceNameOrAlias - The name/path or alias of the service
     * @returns The DataAccess instance or undefined if not found
     */
    getService(serviceNameOrAlias: string): DataAccessInterface | undefined;
    /**
     * Get all registered service names.
     * @returns Array of service names
     */
    getServiceNames(): string[];
    /**
     * Get all registered service aliases.
     * @returns Array of service aliases
     */
    getServiceAliases(): string[];
    /**
     * Get a formatted list of all services with their aliases (if any).
     * @returns String showing all services and their aliases
     */
    getServicesWithAliases(): string;
}
//# sourceMappingURL=serviceRegistry.d.ts.map